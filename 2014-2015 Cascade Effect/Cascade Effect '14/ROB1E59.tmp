#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTMotor,  HTMotor)
#pragma config(Hubs,  S2, HTServo,  HTServo,  none,     none)
#pragma config(Sensor, S3,     HTSPB,          sensorI2CCustom9V)
#pragma config(Sensor, S4,     SMUX,           sensorI2CCustom)
#pragma config(Motor,  mtr_S1_C1_1,     frontRight,    tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     backRight,     tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C2_1,     motorLift1,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     motorLift2,    tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C3_1,     frontLeft,     tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C3_2,     backLeft,      tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C4_1,     collector,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_2,     collector2,    tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S2_C1_1,    dump,                 tServoStandard)
#pragma config(Servo,  srvo_S2_C1_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_6,    servo6,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_1,    rollingGoalLeft,      tServoStandard)
#pragma config(Servo,  srvo_S2_C2_2,    rollingGoalRight,     tServoStandard)
#pragma config(Servo,  srvo_S2_C2_3,    servo9,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_4,    servo10,              tServoNone)
#pragma config(Servo,  srvo_S2_C2_5,    servo11,              tServoNone)
#pragma config(Servo,  srvo_S2_C2_6,    servo12,              tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"
#include "gyroFunctions.c"

bool smuxOff = false;
bool disableAccel = false;
float lpow, rpow = 0;
int exponentDrive(int input)
{
	if(input < 0)
		return (input*input)*(.0062000123)*-1;
	else
		return (input*input)*(.0062000123);

}



void getJoystickHeader(float x, float y)
{
	float phi;
}

void motorTrigger(tMotor motorCall,int x,int y,int z)
{
	motor[motorCall]= (y+x+z);
}



task FPSDrive()
{
	while(true)
	{
		getJoystickSettings(joystick);

		int x = joystick.joy1_x1; //sideways
		int y = joystick.joy1_y1; //forward and backward
		int z= joystick.joy1_x2; //rotation
		/*
		x = exponentDrive(x);
		y = exponentDrive(y);
		z = exponentDrive(z);
	*/
		int trueX = (cosDegrees(currHeading+calibrate)*x)-(sinDegrees(currHeading+calibrate)*y); //sets trueX to rotated value
		int trueY = (sinDegrees(currHeading+calibrate)*x)+(cosDegrees(currHeading+calibrate)*y);

		if ( (abs(joystick.joy1_x1) < 15)) //drive only if joystick out of dead zones
		{
			x = 0;
		}
		if ( (abs(joystick.joy1_y1) < 15)) //drive only if joystick out of dead zones
		{
			y = 0;
		}

		x = trueX;
		y = trueY;
		getJoystickHeader(joystick.joy1_y1,joystick.joy1_x1);

		motor[frontLeft]=(-y+x+z)*.78;
		motor[backLeft]= (-y-x+z)*.78; // -y-x||x+y
		motor[frontRight]=(y+x+z)*.78;//-y+x||-x+y
		motor[backRight]=(y-x+z)*.78;

	}
}
